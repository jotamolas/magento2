  /**
     * @return array
     * @throws CouldNotSaveException
     * Este metodo se depreca se cambiara por nuevas categorias de Plex
     */
    /*public function convertToMagentoCategory()
    {
        //Busco todos las catergorias obtenidos en OnexPlex pero filtrando por los nos sincronizados
        $new_op_category_collection = $this->plexcategory->create()->getCollection();
        $new_op_category_collection
            ->addFieldToFilter('is_synchronized', ['eq' => false])
            ->load();
        //verifico que haya categorias importados y procedo sino devuelvo mensaje
        if (!empty($new_op_category_collection->getColumnValues('id'))) {*/
    //seteo area de ejecuccion como global front y backend
    //$this->state->setAreaCode(\Magento\Framework\App\Area::AREA_GLOBAL); lo paso al controlador
    /** los convierto a Categorias Magento
     *  recorro los nuevos rubros obtenidos y por cada uno los inserto
     */
    /*foreach ($new_op_category_collection as $new_op_category) {
        $mag_category = $this->categoryFactory->create();
        $mag_category->setName($new_op_category->getName())
            ->setIsActive(true);
        if ($new_op_category->getIsPlexGroup()) {
            $mag_category->setLevel(4);
        } elseif ($new_op_category->getIsChild()) {
            $parent_plex_category = $this->plexcategory->create();
            $parent_plex_category->load($new_op_category->getIdParent());
            $mag_category
                ->setParentId($parent_plex_category->getIdMagento())
                ->setLevel(3);
        } else {
            $mag_category->setLevel(2);
        }
        $mag_category = $this->categoryRespository->save($mag_category);
        $new_op_category->setIsSynchronized(true)
            ->setIdMagento($mag_category->getId());
        $new_op_category->save();
    }

    return [
        'state' => 'success',
        'qty' => count($new_op_category_collection),
        'message' => 'convertion success'
    ];
        } else {
    return [
        'state' => 'success',
        'qty' => 0,
        'message' => 'nothing for convert'
    ];
        }
    }*/

    /**
     * @return array
     * @throws \Exception
     * Depreco porque esta en update product
     */
    /*public function updateGrupofromPlex()
    {
        $op_products_collection = $this->plexproduct->create()->getCollection()->load();
        $update_from_plex = $this->getProductsOnexPlex(null, $op_products_collection->getColumnValues('codproduct'));
        if ($update_from_plex['state'] == 'success') {
            $op_products_updated = [];
            if (!empty($update_from_plex['result'])) {
                //recorro el array de productos para analizar si ya lo tengo en base
                foreach ($update_from_plex['result'] as $op_api_product_updated) {
                    $op_product_updated = $this->plexproduct
                        ->create()
                        ->load($op_api_product_updated['codproducto'], 'codproduct');
                    foreach ($op_api_product_updated as $key => $value) {
                        if ($key == 'grupos') {
                            foreach ($value as $gr) {
                                foreach ($gr as $key_gr => $value_gr) {
                                    ($key_gr == 'idgrupo') ? $op_product_updated->setIdgrupo($value_gr) : null;
                                    ($key_gr == 'grupo') ? $op_product_updated->setGrupo($value_gr) : null;
                                }
                            }
                        }
                    }
                    $op_product_updated->save();
                    $op_products_updated[] = $op_product_updated;
                }
            }
            return [
                    'state' => 'success',
                    'received' => count($update_from_plex['result']),
                    'updated' => count($op_products_updated)
                ];
        } else {
            return [
                'state' => 'error',
                'message' => $update_from_plex['message']
            ];
        }
    }*/
    /**
     * @return string[]
     * se depreca hasta implementar categorias de plex
     */
    /*public function addCategoryToProduct()
    {
        $count = 0;
        //Este mÃ©todo agrega o actualiza la categoria a un producto ya sincronizado (convertido).
        $op_products_collection = $this->plexproduct->create()->getCollection()
            ->addFieldToFilter('is_synchronized', ['eq' => true])
            ->addFieldToFilter('idgrupo', ['neq' => 'NULL']);
        //recorro los productos plex que estan sincronizados, busco el producto magento correspondiente
        foreach ($op_products_collection as $op_product) {
            $op_grupo = $this->plexcategory->create()->getCollection()
                ->addFieldToFilter('id_plex', ['eq',$op_product->getIdgrupo()])
                ->addFieldToFilter('is_plex_group', ['eq', true])
                ->getFirstItem();
            $mag_product = $this->productFactory->create()->load($op_product->getIdMagento());
            //Si el grupo esta sincronizado como categoria en magento prosigo sino lo ignoro hasta q se importe.
            if ($op_grupo->getIsSynchronized()) {
                $mag_category =  $this->categoryFactory->create()->load($op_grupo->getIdMagento());
                $this->categoryLinkManagement
                    ->assignProductToCategories($mag_product->getSku(), [$mag_category->getId()]);
                $count++;
            }
        }
        return
            [
                'state' => 'success',
                'message' => "Products Plex with Group: " . count($op_products_collection) .
                    " Products with Categories added: " . $count
            ];
    }*/

    /**
     * @return array
     * @throws \Exception
     * Este metodo se depreca se cambiara por las categorias Plex
     */
    /* public function importRubrosFromPlex()
     {
         //llamamos a la RestApi del Erp y traemos TODOS los productos.
         $rubrosApi = $this->getRubrosOnexPlex();
         $operation = $this->plexoperation->create()
             ->setName("Obtener Rubros desde OnzePlex")
             ->setCode("GROP");
         //si hay resultados de rubros proseguimos
         if ($rubrosApi['state'] == 'success') {
             if (!empty($rubrosApi['result'])) {
                 $op_rubros = [];
                 //recorro el array de rubros para analizar si ya lo tengo en base
                 foreach ($rubrosApi['result'] as $op_api_rubro) {
                     //verifico si no existe ya en la tabla de op
                     $op_category = $this->plexcategory->create()->load($op_api_rubro['idrubro'], 'id_plex');
                     if (empty($op_category->toArray())) {
                         //si no existe lo cargo de vuelta
                         foreach ($op_api_rubro as $key => $value) {
                             ($key == 'idrubro') ? $op_category->setIdPlex($value) : null;
                             ($key == 'rubro') ? $op_category->setName($value) : null;
                         }
                         $op_category->setIsObjectNew(true);
                         $op_category->save();
                         $op_rubros[] = $op_category;
                     }
                 }
                 $operation
                     ->setMessage(
                         "Estado de importacion: Success, Rubros recibidos:" .
                         count($rubrosApi['result']) . " Nuevos:" . count($op_rubros)
                     )->setLastId()
                     ->setIsObjetNew(true)
                     ->save();
                 return [
                     'state' => 'success',
                     'received' => count($rubrosApi['result']),
                     'new' => count($op_rubros),
                     'message' => "Estado de importacion: Success, Rubros recibidos:" .
                         count($rubrosApi['result']) . " Nuevos:" . count($op_rubros)
                 ];
             } else {
                 $operation
                     ->setMessage("Estado de importacion: Success, Productos rubros y subrubros recibidos: 0 Nuevos: 0")
                     ->setIsObjetNew(true)
                     ->save();
                 return[
                     'state' => 'success',
                     'received' => 0,
                     'new' => 0,
                     'message' => "Estado de importacion: Success, Productos rubros: 0 Nuevos: 0"
                 ];
             }
         } else {
             $operation->setMessage("Estado de importacion: Error, Mensaje de Error:" . $rubrosApi['message']);
             $operation->setIsObjetNew(true);
             $operation->save();
             return [
                 'state' => 'error',
                 'received' => 0,
                 'new' => 0,
                 'message' => $rubrosApi['message']
             ];
         }
     }*/

    /**
     * @return array
     * @throws \Exception
     * Este metodo se depreca se cambian por categorias de plex
     */
    /*public function importSubRubrosFromPlex()
    {
        //llamamos a la RestApi del Erp y traemos TODOS los productos.
        $subrubrosApi = $this->getSubRubrosOnexPlex();
        $operation = $this->plexoperation->create()
            ->setName("Obtener Subrubros desde OnzePlex")
            ->setCode("GSOP");
        //si hay resultados de rubros proseguimos
        if ($subrubrosApi['state'] == 'success') {
            if (!empty($subrubrosApi['result'])) {
                $op_sub_rubros = [];
                //recorro el array de rubros para analizar si ya lo tengo en base
                foreach ($subrubrosApi['result'] as $op_api_sub_rubro) {
                    //verifico si no existe ya en la tabla de op
                    //VER ESTO
                    $op_category = $this->plexcategory->create()->load($op_api_sub_rubro['idsubrubro'], 'id_plex');
                    if (empty($op_category->toArray())) {
                        //si no existe lo cargo de vuelta
                        foreach ($op_api_sub_rubro as $key => $value) {
                            ($key == 'idsubrubro') ? $op_category->setIdPlex($value) : null;
                            ($key == 'idrubro') ? $op_category->setIdParent($value) : null;
                            ($key == 'subrubro') ? $op_category->setName($value) : null;
                        }
                        $op_category->setIsChild(true);
                        $op_category->setIsObjectNew(true);
                        $op_category->save();
                        $op_sub_rubros[] = $op_category;
                    }
                }
                $operation
                    ->setMessage(
                        "Estado de importacion: Success, Sub Rubros recibidos:" .
                        count($subrubrosApi['result']) . " Nuevos:" . count($op_sub_rubros)
                    )->setLastId()
                    ->setIsObjetNew(true)
                    ->save();
                return [
                    'state' => 'success',
                    'received' => count($subrubrosApi['result']),
                    'new' => count($op_sub_rubros),
                    'message' => "Estado de importacion: Success, Sub Rubros recibidos:" .
                        count($subrubrosApi['result']) . " Nuevos:" . count($op_sub_rubros)
                ];
            } else {
                $operation
                    ->setMessage("Estado de importacion: Success, Subrubros recibidos: 0 Nuevos: 0")
                    ->setIsObjetNew(true)
                    ->save();
                return[
                    'state' => 'success',
                    'received' => 0,
                    'new' => 0,
                    'message' =>  "Estado de importacion: Success, Subrubros recibidos: 0 Nuevos: 0"
                ];
            }
        } else {
            $operation->setMessage("Estado de importacion: Error, Mensaje de Error:" . $subrubrosApi['message']);
            $operation->setIsObjetNew(true);
            $operation->save();
            return [
                'state' => 'error',
                'message' => $subrubrosApi['message']
            ];
        }
    }*/

    /**
     * @return array
     * @throws \Exception
     * Este metodo tiene que deprecarse.. cambiara por las categorias nuevas de Plex
     */
    /*    public function importGruposFromPlex()
        {
            //llamamos a la RestApi del Erp y traemos TODOS los grupos.
            $gruposApi = $this->getGruposPlex();
            $operation = $this->plexoperation->create()
                ->setName("Obtener Grupos desde OnzePlex")
                ->setCode("GGOP");
            //si hay resultados de rubros proseguimos
            if ($gruposApi['state'] == 'success') {
                if (!empty($gruposApi['result'])) {
                    $op_grupos = [];
                    //recorro el array de rubros para analizar si ya lo tengo en base
                    foreach ($gruposApi['result'] as $op_api_grupo) {
                        //verifico si no existe ya en la tabla de op
                        //VER ESTO
                        $op_category = $this->plexcategory->create();
                        $op_category_collection = $this->plexcategory->create()->getCollection();
                        $op_category_collection
                            ->addFieldToFilter('is_plex_group', ['eq' => true])
                            ->addFieldToFilter('id_plex', ['eq' => $op_api_grupo['idgrupo']])
                            ->load();
                        $items = $op_category_collection->toArray();
                        if (empty($items['items'])) {
                            //si no existe lo cargo de vuelta
                            foreach ($op_api_grupo as $key => $value) {
                                ($key == 'idgrupo') ? $op_category->setIdPlex($value) : null;
                                ($key == 'grupo') ? $op_category->setName($value) : null;
                            }
                            $op_category->setIsChild(true);
                            $op_category->setIsPlexGroup(true);
                            $op_category->setIsObjectNew(true);
                            $op_category->save();
                            $op_grupos[] = $op_category;
                        }
                    }
                    $operation
                         ->setMessage(
                             "Estado de importacion: Success, Grupos recibidos:" .
                             count($gruposApi['result']) . " Nuevos:" . count($op_grupos)
                         )->setLastId()
                         ->setIsObjetNew(true)
                         ->save();
                    return [
                        'state' => 'success',
                        'received' => count($gruposApi['result']),
                        'new' => count($op_grupos),
                        'message' => "Estado de importacion: Success, Grupos recibidos:" .
                            count($gruposApi['result']) . " Nuevos:" . count($op_grupos)

                    ];
                } else {
                    $operation
                        ->setMessage("Estado de importacion: Success, Grupos recibidos: 0 Nuevos: 0")
                        ->setIsObjetNew(true)
                        ->save();
                    return[
                        'state' => 'success',
                        'received' => 0,
                        'new' => 0,
                        'message' => "Estado de importacion: Success, Grupos recibidos: 0 Nuevos: 0"
                    ];
                }
            } else {
                $operation->setMessage("Estado de importacion: Error, Mensaje de Error:" . $gruposApi['message']);
                $operation->setIsObjetNew(true);
                $operation->save();
                return [
                    'state' => 'error',
                    'message' => $gruposApi['message']
                ];
            }
        }*/


            /*public function getPedidos($id_pedido = 'E00200000005')
            {
                $this->zendClient->resetParameters();
                try {
                    $this->zendClient->setUri($this->uriProd . "ec_getpedidos");
                    $this->zendClient->setMethod(ZendClient::GET);
                    $this->zendClient->setAuth($this->userProd, $this->passwordProd);
                    $this->zendClient->setHeaders(['Content-Type' => 'application/json']);
                    $this->zendClient->setParameterGet(
                        'idpedido',
                        $id_pedido
                    );
                    $response = $this->zendClient->request();
                    $response_array = $this->json->unserialize($response->getBody());
                    return [
                        'state' => 'success',
                        'result' => $response_array['response']['content']['pedidos']
                    ];
                } catch (\Zend_Http_Client_Exception $e) {
                    return [
                        'state' => 'error',
                        'code' => $e->getCode(),
                        'message' => $e->getMessage()
                    ];
                }
            }*/
            /* public function getMediosPago()
             {
                 $this->zendClient->resetParameters();
                 try {
                     $this->zendClient->setUri($this->uriProd . "ec_getmediosdepago");
                     $this->zendClient->setMethod(ZendClient::GET);
                     $this->zendClient->setAuth($this->userProd, $this->passwordProd);
                     $this->zendClient->setHeaders(['Content-Type' => 'application/json']);

                     $response = $this->zendClient->request();
                     $response_array = $this->json->unserialize($response->getBody());
                     return [
                         'state' => 'success',
                         'result' => $response_array['response']['content']['medios']
                     ];
                 } catch (\Zend_Http_Client_Exception $e) {
                     return [
                         'state' => 'error',
                         'code' => $e->getCode(),
                         'message' => $e->getMessage()
                     ];
                 }
             }*/


                 /*public function getSucursalesPlex()
                 {
                     $this->zendClient->resetParameters();
                     try {
                         $this->zendClient->setUri($this->uriProd . "ec_getsucursales");
                         $this->zendClient->setMethod(ZendClient::GET);
                         $this->zendClient->setAuth($this->userProd, $this->passwordProd);
                         $this->zendClient->setHeaders(['Content-Type' => 'application/json']);

                         $response = $this->zendClient->request();
                         $response_array = $this->json->unserialize($response->getBody());
                         return [
                             'state' => 'success',
                             'result' => $response_array['response']['content']['sucursales']
                         ];
                     } catch (\Zend_Http_Client_Exception $e) {
                         return [
                             'state' => 'error',
                             'code' => $e->getCode(),
                             'message' => $e->getMessage()
                         ];
                     }
                 }*/
